// generated by jsonenums -type=SubvolType; DO NOT EDIT

package api

import (
	"encoding/json"
	"fmt"
)

var (
	_SubvolTypeNameToValue = map[string]SubvolType{
		"Distribute": SubvolDistribute,
		"Replicate":  SubvolReplicate,
		"Disperse":   SubvolDisperse,
	}

	_SubvolTypeValueToName = map[SubvolType]string{
		SubvolDistribute: "Distribute",
		SubvolReplicate:  "Replicate",
		SubvolDisperse:   "Disperse",
	}
)

func init() {
	var v SubvolType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_SubvolTypeNameToValue = map[string]SubvolType{
			interface{}(SubvolDistribute).(fmt.Stringer).String(): SubvolDistribute,
			interface{}(SubvolReplicate).(fmt.Stringer).String():  SubvolReplicate,
			interface{}(SubvolDisperse).(fmt.Stringer).String():   SubvolDisperse,
		}
	}
}

// MarshalJSON is generated so SubvolType satisfies json.Marshaler.
func (r SubvolType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _SubvolTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid SubvolType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so SubvolType satisfies json.Unmarshaler.
func (r *SubvolType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SubvolType should be a string, got %s", data)
	}
	v, ok := _SubvolTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid SubvolType %q", s)
	}
	*r = v
	return nil
}
