// generated by jsonenums -type=VolType; DO NOT EDIT

package api

import (
	"encoding/json"
	"fmt"
)

var (
	_VolTypeNameToValue = map[string]VolType{
		"Distribute":    Distribute,
		"Replicate":     Replicate,
		"Disperse":      Disperse,
		"DistReplicate": DistReplicate,
		"DistDisperse":  DistDisperse,
	}

	_VolTypeValueToName = map[VolType]string{
		Distribute:    "Distribute",
		Replicate:     "Replicate",
		Disperse:      "Disperse",
		DistReplicate: "DistReplicate",
		DistDisperse:  "DistDisperse",
	}
)

func init() {
	var v VolType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_VolTypeNameToValue = map[string]VolType{
			interface{}(Distribute).(fmt.Stringer).String():    Distribute,
			interface{}(Replicate).(fmt.Stringer).String():     Replicate,
			interface{}(Disperse).(fmt.Stringer).String():      Disperse,
			interface{}(DistReplicate).(fmt.Stringer).String(): DistReplicate,
			interface{}(DistDisperse).(fmt.Stringer).String():  DistDisperse,
		}
	}
}

// MarshalJSON is generated so VolType satisfies json.Marshaler.
func (r VolType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _VolTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid VolType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so VolType satisfies json.Unmarshaler.
func (r *VolType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("VolType should be a string, got %s", data)
	}
	v, ok := _VolTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid VolType %q", s)
	}
	*r = v
	return nil
}
